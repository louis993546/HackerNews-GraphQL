type Query {
    item(id: ID!): Item!
    # story(id: ID!): Story!
    # comment(id: ID!): Comment!
    # ask(id: ID!): Ask!
    # job(id: ID!): Job!
    # poll(id: ID!): Poll!
    # pollopt(id: ID!): PollOpt!
    user(id: String!): User!

    topStories: [Story!]!
    newStories: [Story!]!
    bestStories: [Story!]!

    askStories: [Ask!]!
    showStories: [Story!]!  # TODO: not very sure about this
    jobStories: [Job!]!

    updatedItems: [Item!]!
    updatedProfiles: [User!]!
}

interface Item {
    id: ID!
    by: String!
    time: Timestamp!
}

type Story implements Item {
    id: ID!
    by: String!
    time: Timestamp!
    # end of Item
    descendants: Int!
    kids: [Comment!]!
    score: Int!
    title: String!
    url: String!
}

type Comment implements Item {
    id: ID!
    by: String!
    time: Timestamp!
    # end of Item
    kids: [Comment!]!
    parent: Item!
    text: String!
}

type Ask implements Item {
    id: ID!
    by: String!
    time: Timestamp!
    # end of Item
    descendants: Int!
    kids: [Comment!]!
    score: Int!
    text: String!   # TODO: specify this is html?
    title: String!
    url: String!
}

type Job implements Item {
    id: ID!
    by: String!
    time: Timestamp!
    # end of Item
    score: Int!
    text: String!
    title: String!
    url: String!
}

type Poll implements Item {
    id: ID!
    by: String!
    time: Timestamp!
    # end of Item
    descendants: Int!
    kids: [Comment!]!
    parts: [PollOpt!]!
    score: Int!
    text: String!
    title: String!
}

type PollOpt implements Item {
    id: ID!
    by: String!
    time: Timestamp!
    # end of Item
    poll: Poll!
    score: Int!
    text: String!
}

type User {
    id: ID!
    about: String
    created: Timestamp!
    karma: Int
    delay: Int
    submitted: [Item!]!
}

type Timestamp {
    epoch: Int!
    iso8601: String!
}